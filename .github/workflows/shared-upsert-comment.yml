name: Upsert Comment on PR

on:
  workflow_call:
    inputs:
      comment-body:
        description: 'Body of the comment to post on the PR'
        required: false
        type: string
      comment-title:
        description: 'Unique identifier for the comment (acts as an id)'
        required: false
        type: string


jobs:
  upsert-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Find PR number
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number = null;
            console.log(`Event name: ${{ github.event_name}}`);
            const event_name = '${{ github.event_name }}';
            if (event_name == 'pull_request') {
              pr_number = ${{ github.context.payload.pull_request.number }} ;
            } 
            if (pulls.length > 0) {
              pr_number = pulls[0].number;
            }
            
            if (!pr_number) {
              core.setFailed('No pull request found for this workflow run.');
            }
            core.setOutput('pr_number', pr_number);

      # - name: Upsert comment on PR
      #   uses: actions/github-script@v7
      #   env:
      #     pr_number: ${{ steps.find_pr.outputs.pr_number }}
      #   with:
      #     script: |
      #       const pr_number = core.getInput('pr_number') || '${{ steps.find_pr.outputs.pr_number }}';
      #       const body = `${{ inputs.comment-body }}`;
      #       const title = `${{ inputs.comment-title }}`;

            
      #       // Find existing comment by this workflow and name
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: pr_number,
      #       });
      #       const existing = comments.find(c => c.body && c.body.includes(title));
      #       const commentBody = `## ${title}\n${body}`;
      #       if (existing) {
      #         await github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: existing.id,
      #           body: commentBody,
      #         });
      #         console.log(`Updated comment: ${existing.id}`);
      #       } else {
      #         await github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: pr_number,
      #           body: commentBody,
      #         });
      #         console.log(`Created comment on PR #${pr_number}`);
      #       }
