name: Deploy from release

on: 
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag to inspect'
        required: true
        type: string

jobs:
  inspect:
    name: Output release information
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.get_release.outputs.name }}
      release_tag: ${{ steps.get_release.outputs.tag_name }}
      release_body: ${{ steps.get_release.outputs.body }}
      release_draft: ${{ steps.get_release.outputs.draft }}
      release_prerelease: ${{ steps.get_release.outputs.prerelease }}
      release_created_at: ${{ steps.get_release.outputs.created_at }}
      release_published_at: ${{ steps.get_release.outputs.published_at }}
      release_url: ${{ steps.get_release.outputs.html_url }}
      release_id: ${{ steps.get_release.outputs.id }}
    steps:
      - name: Fetch release info
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ inputs.release_tag }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            core.setOutput('name', release.name);
            core.setOutput('tag_name', release.tag_name);
            core.setOutput('body', release.body);
            core.setOutput('draft', release.draft);
            core.setOutput('prerelease', release.prerelease);
            core.setOutput('created_at', release.created_at);
            core.setOutput('published_at', release.published_at);
            core.setOutput('html_url', release.html_url);
            core.setOutput('id', release.id);
      - name: Output release information
        run: |
          echo "Release name = ${{ steps.get_release.outputs.name }}"
          echo "Release tag = ${{ steps.get_release.outputs.tag_name }}"
          echo "Release body = ${{ steps.get_release.outputs.body }}"
          echo "Release draft = ${{ steps.get_release.outputs.draft }}"
          echo "Release prerelease = ${{ steps.get_release.outputs.prerelease }}"
          echo "Release created at = ${{ steps.get_release.outputs.created_at }}"
          echo "Release published at = ${{ steps.get_release.outputs.published_at }}"
          echo "Release URL = ${{ steps.get_release.outputs.html_url }}"
  deploy:
    name: Deploy to production
    if: ${{ github.event.release.prerelease == false && github.event.release.draft == false }}
    runs-on: ubuntu-latest
    needs: inspect
    steps:
      - name: Ensure release is valid
        run: |
          echo "Release name = ${{ needs.inspect.outputs.release_name }}"
      - name: Make release the latest
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.inspect.outputs.release_id }},
              make_latest: true
            });
            console.log(`Release ${release.tag_name} is now the latest release.`);